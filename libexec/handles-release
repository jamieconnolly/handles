#!/bin/bash
# Usage: handles release [major | minor | patch | <version>]
# Summary: Tag and push a release

set -e

cd "$(git rev-parse --show-toplevel 2>/dev/null)"

BRANCH="$(git symbolic-ref --short HEAD 2>/dev/null || true)"
USE_EMOJI="$(git config release.emoji || true)"
VERSION="$1"

if [ -z "$VERSION" ]; then
  handles help release >&2
  exit 1
elif [ -z "$BRANCH" ]; then
  echo "!!! Error: your checkout isn't on a branch" >&2
  exit 1
elif ! git diff-index --quiet HEAD --; then
  echo "!!! Error: there are uncommitted changes" >&2
  exit 1
elif ! git fetch --quiet --tags origin; then
  echo "!!! Error: running 'git fetch' failed" >&2
  exit 1
elif [ "$(git rev-list --count HEAD.."${BRANCH}@{upstream}")" != "0" ]; then
  echo "!!! Error: there have been upstream changes on the branch" >&2
  exit 1
fi

PREV_VERSION="$(git describe --tags --abbrev=0 --match='v[0-9]*' 2>/dev/null || true)"
VERSION_REGEX="^v(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))?)?$"

if [[ "$PREV_VERSION" =~ $VERSION_REGEX ]]; then
  MAJOR="${BASH_REMATCH[1]}"
  MINOR="${BASH_REMATCH[3]}"
  PATCH="${BASH_REMATCH[5]}"
elif [ -z "$PREV_VERSION" ]; then
  MAJOR="0"
  MINOR="0"
  PATCH="0"
fi

case $VERSION in
  major|+M) VERSION="v$((${MAJOR:-0} + 1))${MINOR:+.0}${PATCH:+.0}" ;;
  minor|+m) VERSION="v${MAJOR:-0}.$((${MINOR:-0} + 1))${PATCH:+.0}" ;;
  patch|+p) VERSION="v${MAJOR:-0}.${MINOR:-0}.$((${PATCH:-0} + 1))" ;;
esac

if [[ ! "$VERSION" =~ $VERSION_REGEX ]]; then
  echo "!!! Error: invalid version: ${VERSION}" >&2
  exit 1
elif git describe --exact-match "$VERSION" &>/dev/null; then
  echo "!!! Error: ${VERSION} tag already exists" >&2
  exit 1
elif [ -n "$PREV_VERSION" ] && [ "$(git rev-list --count "$PREV_VERSION"..HEAD)" == "0" ]; then
  echo "!!! Error: there are no commits to release" >&2
  exit 1
fi

if [ -f "package.json" ] && npm version --no-git-tag-version "${VERSION#v}" &>/dev/null; then
  echo "==> Bumping version…"

  test -f "npm-shrinkwrap.json" && git add --update npm-shrinkwrap.json
  test -f "package-lock.json" && git add --update package-lock.json

  git add --update package.json
fi

if [ -f "CHANGELOG.md" ] && ! grep -q "^# ${VERSION}" CHANGELOG.md &>/dev/null; then
  echo "==> Generating changelog…"

  printf "# %s - %s\\n\\n" "$VERSION" "$(date +"%d %b %Y")" > CHANGELOG.tmp

  if [ -n "$PREV_VERSION" ]; then
    git log  --reverse --no-merges --format='- %s' "$PREV_VERSION"..HEAD
  else
    if [ "$USE_EMOJI" == "true" ]; then
      echo "- :tada: Initial release"
    else
      echo "- Initial release"
    fi
  fi >> CHANGELOG.tmp

  if [ -s "CHANGELOG.md" ]; then
    printf "\\n%s\\n" "$(cat CHANGELOG.md)" >> CHANGELOG.tmp
  fi

  mv CHANGELOG.tmp CHANGELOG.md

  git add --update CHANGELOG.md
fi

if ! git diff-index --cached --quiet HEAD --; then
  if [ "$USE_EMOJI" == "true" ]; then
    COMMIT_MSG=":bookmark: Release ${VERSION}"
  else
    COMMIT_MSG="Release ${VERSION}"
  fi

  echo "==> Preparing release…"
  if ! git commit -m "$COMMIT_MSG" &>/dev/null; then
    echo "!!! Error: failed to prepare release" >&2
    exit 1
  fi
fi

if [ "$(git rev-list --count "${BRANCH}@{upstream}"..HEAD)" != "0" ]; then
  echo "==> Pushing branch to origin…"
  if ! git push --set-upstream origin "$BRANCH" &>/dev/null; then
    echo "!!! Error: failed to push to origin" >&2
    exit 1
  fi
fi

if [ "$BRANCH" == "master" ]; then
  if [ "$USE_EMOJI" == "true" ]; then
    RELEASE_MSG=":bookmark: Tag ${VERSION}"
  else
    RELEASE_MSG="Tag ${VERSION}"
  fi

  echo "==> Tagging release…"
  if ! git tag -a -s "$VERSION" -m "$RELEASE_MSG" &>/dev/null; then
    echo "!!! Error: failed to tag release" >&2
    exit 1
  fi

  echo "==> Pushing tag to origin…"
  if ! git push origin "$VERSION" &>/dev/null; then
    echo "!!! Error: failed to push tag to origin" >&2
    exit 1
  fi

  echo "==> Successfully released ${VERSION}!"
fi
