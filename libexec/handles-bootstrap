#!/bin/bash
# Usage: handles bootstrap
# Summary: Resolve all dependencies that the project requires to run

set -e
cd "$(git rev-parse --show-toplevel)"
test -f "bin/bootstrap" && exec "bin/bootstrap" "$@"

if [ -f ".gitmodules" ]; then
  echo "==> Cloning into submodules…"
  git submodule update --init --recursive
fi

if [ "$(uname -s)" = "Darwin" ]; then
  if [ -f "Brewfile" ] && ! brew bundle check &>/dev/null; then
    echo "==> Installing Homebrew dependencies…"
    brew bundle
  fi

  if [ -f ".node-version" ] && ! nodenv version-name &>/dev/null; then
    echo "==> Installing Node…"
    nodenv install --skip-existing
  fi

  if [ -f ".python-version" ] && ! pyenv version-name &>/dev/null; then
    echo "==> Installing Python…"
    pyenv install --skip-existing

    if ! pyenv which pipenv >/dev/null 2>&1; then
      pip install pipenv
      pyenv rehash
    fi
  fi

  if [ -f ".ruby-version" ] && ! rbenv version-name &>/dev/null; then
    echo "==> Installing Ruby…"
    rbenv install --skip-existing

    if ! rbenv which bundle >/dev/null 2>&1; then
      gem install bundler
      rbenv rehash
    fi
  fi
fi

if [ -f "Gemfile" ]; then
  echo "==> Installing gem dependencies…"
  bundle check &>/dev/null || bundle install --without production
fi

if [ -f "Makefile" ] && (make -q get-deps &>/dev/null; test $? -eq 1); then
  echo "==> Installing Makefile dependencies…"
  make get-deps
fi

if [ -f "package.json" ]; then
  echo "==> Installing npm dependencies…"
  yarn install
fi

if [ -f "Pipfile" ]; then
  if pipenv --venv &>/dev/null; then
    PYTHON_REQUESTED="$(pyenv prefix)/bin/python"

    if [ "$(pipenv run python --version 2>&1)" != "$("$PYTHON_REQUESTED" --version 2>&1)" ]; then
      PYTHON_OUTDATED=1
    fi
  fi

  echo "==> Installing pip dependencies…"
  pipenv install --dev ${PYTHON_OUTDATED:+--python="$PYTHON_REQUESTED"}
fi
