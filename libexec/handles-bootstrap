#!/bin/bash
# Usage: handles bootstrap
# Summary: Resolve all dependencies that the project requires to run

set -e

cd "$(git rev-parse --show-toplevel 2>/dev/null)"
test -f "bin/bootstrap" && exec bin/bootstrap "$@"

if [ -f ".gitmodules" ]; then
  echo "==> Cloning into submodules…"
  git submodule update --init --recursive
fi

if [ "$(uname -s)" = "Darwin" ]; then
  if [ -f "Brewfile" ] && ! brew bundle check &>/dev/null; then
    echo "==> Installing Homebrew dependencies…"

    if ! command -v brew >/dev/null 2>&1; then
      echo "!!! Error: brew is not installed" >&2
      exit 1
    fi

    brew bundle
  fi

  if [ -f ".node-version" ] && ! nodenv version-name &>/dev/null; then
    echo "==> Installing Node…"

    if ! command -v nodenv >/dev/null 2>&1; then
      echo "!!! Error: nodenv is not installed" >&2
      exit 1
    fi

    nodenv install --skip-existing
  fi

  if [ -f ".python-version" ] && ! pyenv version-name &>/dev/null; then
    echo "==> Installing Python…"

    if ! command -v pyenv >/dev/null 2>&1; then
      echo "!!! Error: pyenv is not installed" >&2
      exit 1
    fi

    pyenv install --skip-existing

    if ! pyenv which pipenv >/dev/null 2>&1; then
      pip install pipenv
      pyenv rehash
    fi
  fi

  if [ -f ".ruby-version" ] && ! rbenv version-name &>/dev/null; then
    echo "==> Installing Ruby…"

    if ! command -v rbenv >/dev/null 2>&1; then
      echo "!!! Error: rbenv is not installed" >&2
      exit 1
    fi

    rbenv install --skip-existing

    if ! rbenv which bundle >/dev/null 2>&1; then
      gem install bundler
      rbenv rehash
    fi
  fi
fi

if [ -f "glide.yaml" ]; then
  echo "==> Installing Go dependencies…"

  if ! command -v glide >/dev/null 2>&1; then
    echo "!!! Error: glide is not installed" >&2
    exit 1
  fi

  glide install --strip-vendor
fi

if [ -f "package.json" ]; then
  echo "==> Installing Node dependencies…"

  if [ -f "yarn.lock" ]; then
    if ! command -v yarn >/dev/null 2>&1; then
      echo "!!! Error: yarn is not installed" >&2
      exit 1
    fi

    yarn install
  else
    npm install
  fi
fi

if [ -f "Pipfile" ]; then
  if pipenv --venv &>/dev/null; then
    PYTHON_REQUESTED="$(pyenv prefix)/bin/python"

    if [ "$(pipenv run python --version 2>&1)" != "$("$PYTHON_REQUESTED" --version 2>&1)" ]; then
      PYTHON_OUTDATED=1
    fi
  fi

  echo "==> Installing Python dependencies…"
  pipenv install --dev ${PYTHON_OUTDATED:+--python="$PYTHON_REQUESTED"}
fi

if [ -f "Gemfile" ]; then
  echo "==> Installing Ruby dependencies…"
  bundle check &>/dev/null || bundle install --without production
fi
