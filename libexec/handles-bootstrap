#!/bin/bash
# Usage: handles-bootstrap
# Summary: Resolve all dependencies that the application requires to run

set -e

if [ -f ".gitmodules" ]; then
  echo "==> Cloning into submodules…"
  git submodule update --init --recursive
fi

if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
  brew bundle check &>/dev/null || {
    echo "==> Installing Homebrew dependencies…"
    brew bundle
  }
fi

if [ -n "$(nodenv version-file "$PWD" 2>/dev/null)" ] && [ -z "$(nodenv version-name 2>/dev/null)" ]; then
  echo "==> Installing Node…"
  nodenv install --skip-existing
fi

if [ -n "$(pyenv version-file "$PWD" 2>/dev/null)" ]; then
  if [ -z "$(pyenv version-name 2>/dev/null)" ]; then
    echo "==> Installing Python…"
    pyenv install --skip-existing
  fi

  if [ -z "$(pyenv virtualenv-name 2>/dev/null)" ]; then
    VIRTUALENV_NAME="$(pyenv virtualenv-local 2>/dev/null || true)"

    if [ -z "$VIRTUALENV_NAME" ]; then
      VIRTUALENV_NAME="${PWD##*/}"
    fi

    echo "==> Setting up Python environment…"
    pyenv virtualenv "$VIRTUALENV_NAME"
    pyenv virtualenv-local "$VIRTUALENV_NAME"
  fi
fi

if [ -n "$(rbenv version-file "$PWD" 2>/dev/null)" ] && [ -z "$(rbenv version-name 2>/dev/null)" ]; then
  echo "==> Installing Ruby…"
  rbenv install --skip-existing

  if [ -z "$(rbenv which bundle 2>/dev/null)" ]; then
    gem install bundler
    rbenv rehash
  fi
fi

if [ -f "package.json" ]; then
  echo "==> Installing Node dependencies…"
  npm install
fi

if [ -f "requirements-dev.txt" ] || [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
  echo "==> Installing Python dependencies…"
  if [ -f "setup.py" ]; then
    pip install -e .
    pip install .[dev]
  elif [ -f "requirements-dev.txt" ]; then
    pip install -r requirements-dev.txt
  elif [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
  fi
fi

if [ -f "Gemfile" ]; then
  echo "==> Installing Ruby dependencies…"
  bundle check &>/dev/null || {
    bundle install --without production
  }
fi
