#!/bin/bash
# Usage: handles bootstrap
# Summary: Resolve all dependencies that the project requires to run

set -e

cd "$(git rev-parse --show-toplevel 2>/dev/null)"
test -f "bin/bootstrap" && exec bin/bootstrap

if [ -f "Makefile" ] && (make -q bootstrap &>/dev/null; test $? -eq 1); then
  exec make bootstrap
elif [ -f "Rakefile" ] && bundle exec rake -T bootstrap &>/dev/null; then
  exec bundle exec rake bootstrap
fi

if [ -f ".gitmodules" ]; then
  echo "==> Cloning into submodules…"
  git submodule update --init --recursive
fi

if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
  echo "==> Installing Homebrew dependencies…"
  brew bundle check &>/dev/null || brew bundle
fi

if [ -f "Gopkg.toml" ]; then
  if ! goenv version-name &>/dev/null; then
    echo "==> Installing Go…"
    goenv install --skip-existing
  fi

  echo "==> Installing Go dependencies…"
  dep ensure
fi

if [ -f "package.json" ]; then
  if ! nodenv version-name &>/dev/null; then
    echo "==> Installing Node…"
    nodenv install --skip-existing
  fi

  echo "==> Installing Node dependencies…"
  yarn install
fi

if [ -f "Pipfile" ]; then
  if ! pyenv version-name &>/dev/null; then
    echo "==> Installing Python…"
    pyenv install --skip-existing
  fi

  if pipenv --venv &>/dev/null; then
    PYTHON_REQUESTED="$(pyenv prefix)/bin/python"

    if [ "$(pipenv run python --version 2>&1)" != "$("$PYTHON_REQUESTED" --version 2>&1)" ]; then
      PYTHON_OUTDATED=1
    fi
  fi

  echo "==> Installing Python dependencies…"
  pipenv install --dev ${PYTHON_OUTDATED:+--python="$PYTHON_REQUESTED"}
fi

if [ -f "Gemfile" ]; then
  if ! rbenv version-name &>/dev/null; then
    echo "==> Installing Ruby…"
    rbenv install --skip-existing

    if ! rbenv which bundle >/dev/null 2>&1; then
      gem install bundler
      rbenv rehash
    fi
  fi

  echo "==> Installing Ruby dependencies…"
  bundle check &>/dev/null || bundle install --without production
fi
