#!/bin/bash
# Usage: handles bootstrap
# Summary: Resolve all dependencies that the project requires to run

set -e
cd "$(git rev-parse --show-toplevel)"
test -f "bin/bootstrap" && exec "bin/bootstrap" "$@"

if [ -f ".gitmodules" ]; then
  echo "==> Cloning into submodules…"
  git submodule update --init --recursive
fi

if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
  brew bundle check &>/dev/null || {
    echo "==> Installing Homebrew dependencies…"
    brew bundle
  }
fi

if [ -f "Makefile" ]; then
  (make -q get-deps &>/dev/null; test $? -eq 1) && {
    echo "==> Installing Make dependencies…"
    make get-deps
  }
fi

if [ -f ".node-version" ] && [ -z "$(nodenv version-name 2>/dev/null)" ]; then
  echo "==> Installing Node…"
  nodenv install --skip-existing
fi

if [ -f "package.json" ]; then
  echo "==> Installing Node dependencies…"
  yarn install
fi

if [ -f ".python-version" ] && [ -z "$(pyenv version-name 2>/dev/null)" ]; then
  echo "==> Installing Python…"
  pyenv install --skip-existing

  if [ -z "$(pyenv which pipenv 2>/dev/null)" ]; then
    pip install pipenv
    pyenv rehash
  fi
fi

if [ -f "Pipfile" ]; then
  echo "==> Installing Python dependencies…"
  pipenv install --dev
fi

if [ -f ".ruby-version" ] && [ -z "$(rbenv version-name 2>/dev/null)" ]; then
  echo "==> Installing Ruby…"
  rbenv install --skip-existing

  if [ -z "$(rbenv which bundle 2>/dev/null)" ]; then
    gem install bundler
    rbenv rehash
  fi
fi

if [ -f "Gemfile" ]; then
  echo "==> Installing Ruby dependencies…"
  bundle check &>/dev/null || {
    bundle install --without production
  }
fi
